{"version":3,"sources":["webClient/components/poolBall/index.tsx","webClient/components/pollRack/index.tsx","webClient/components/homepage/index.tsx","webClient/Theme.tsx","webClient/serviceWorker.js","index.tsx","webClient/App.tsx"],"names":["PoolBall","props","colour","style","backgroundColor","width","size","minWidth","height","minHeight","borderRadius","react","className","PoolRack","concat","ballSize","id","pollRack_PoolRow","poolBall_PoolBall","PoolRow","children","HomePage","pollRack_PoolRack","index_es","variant","color","theme","createMuiTheme","palette","primary","main","secondary","ThemeWrapper","styles","Boolean","window","location","hostname","match","ReactDOM","Theme_ThemeWrapper","homepage_HomePage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a754fb5a.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ninterface IProps {\r\n    colour: \"red\" | \"yellow\" | \"white\" | \"black\",\r\n    size: string;\r\n}\r\n\r\nexport const PoolBall = (props: IProps) => {\r\n    var colour: string;\r\n    switch(props.colour)\r\n    {\r\n        default:\r\n        case \"black\":\r\n            colour = \"#000\";\r\n            break;\r\n            \r\n        case \"white\":\r\n        colour = \"#fff\";\r\n        break;\r\n        \r\n        case \"red\":\r\n            colour = \"#ba2d0b\";\r\n            break;\r\n            \r\n        case \"yellow\":\r\n            colour = \"#ff0\";\r\n            break;\r\n    }\r\n\r\n    const style = {\r\n        backgroundColor: colour,\r\n        width: props.size,\r\n        minWidth: props.size,\r\n        height: props.size,\r\n        minHeight: props.size,\r\n        borderRadius: \"50%\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"poolBall\" style={style}></div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { PoolBall } from '../poolBall';\r\nimport './poolRack.sass';\r\nimport { checkPropTypes } from 'prop-types';\r\n\r\ninterface IProps {\r\n    id?: string,\r\n    ballSize: string\r\n}\r\n\r\nexport const PoolRack: React.StatelessComponent<IProps> = props => {\r\n    const style = {\r\n        width: `calc(${props.ballSize} * 5)`,\r\n        height: `calc(${props.ballSize} * 4 * 0.866 + ${props.ballSize})`,\r\n    }\r\n\r\n    return(\r\n        <div className=\"poolRack\" style={style} id={props.id}>\r\n            <PoolRow {...props}>   \r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n            </PoolRow>\r\n            <PoolRow {...props }>   \r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n            </PoolRow>\r\n            <PoolRow {...props }>   \r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n                <PoolBall size={props.ballSize} colour=\"black\" />\r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n            </PoolRow>\r\n            <PoolRow {...props }>   \r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n            </PoolRow>\r\n            <PoolRow {...props }>   \r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n                <PoolBall size={props.ballSize} colour=\"red\" />\r\n                <PoolBall size={props.ballSize} colour=\"yellow\" />\r\n            </PoolRow>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PoolRow : React.StatelessComponent<IProps> = props => {\r\n    return (\r\n        <div className=\"poolRow\" style={{height: `calc(${props.ballSize} * 0.866)`}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Button, withStyles, createMuiTheme } from '@material-ui/core';\r\nimport './homepage.sass';\r\nimport { PoolRack } from '../pollRack';\r\n\r\nexport const HomePage = () => {\r\n    return (\r\n        <main className=\"homepage\">\r\n            <PoolRack id=\"logo\" ballSize=\"10vmin\" />\r\n            <h1>Killer Pool</h1>\r\n            <h3>Get stuck into a game!</h3>\r\n            <div>\r\n                <Button variant=\"contained\" color=\"primary\">Join Existing Session</Button>\r\n            </div>\r\n            <div>\r\n                <Button variant=\"contained\" color=\"secondary\">Start New Session</Button>\r\n            </div>\r\n        </main>\r\n    );\r\n}","import * as React from 'react';\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#43a047',\r\n        },\r\n        secondary: {\r\n            main: '#2196f3',\r\n        },\r\n    },\r\n});\r\n\r\nexport const ThemeWrapper : React.StatelessComponent = props => {\r\n    return(\r\n        <MuiThemeProvider theme={theme}>\r\n            {props.children}\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { App } from './webClient/App';\r\nimport * as serviceWorker from './webClient/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport './App.sass';\r\nimport { HomePage } from './components/homepage';\r\nimport { ThemeWrapper } from './Theme';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <ThemeWrapper>\r\n      <div id=\"App\">\r\n        <HomePage />\r\n      </div>\r\n    </ThemeWrapper>\r\n  );\r\n};\r\n"],"sourceRoot":""}